def format VectorCryptoArithFormat(code, category, *flags) {{
    iop = InstObjParams(name, Name, 'VectorCryptoArithMacroInst', code, flags)

    v0_required = True
    mask_cond = True
    need_elem_idx = True
    old_vd_idx = 1

    dest_reg_id = "vecRegClass[_machInst.vd + _microIdx]"
    src2_reg_id = "vecRegClass[_machInst.vs2 + _microIdx]"
    src3_reg_id = "vecRegClass[_machInst.vs3 + _microIdx]"

    set_dest_reg_idx = setDestWrapper(dest_reg_id)

    set_src_reg_idx = ""
    set_src_reg_idx += setSrcWrapper(src2_reg_id)
    set_src_reg_idx += setSrcWrapper(src3_reg_id)

    if v0_required:
        set_src_reg_idx += setSrcVm()

    # code
    if mask_cond:
        code = maskCondWrapper(code)
    if need_elem_idx:
        code = eiDeclarePrefix(code)
    code = loopWrapper(code)

    vm_decl_rd = ""
    if v0_required:
        vm_decl_rd = vmDeclAndReadData()

    microiop = InstObjParams(name + "_micro",
        Name + "Micro",
        'VectorCryptoArithMicroInst',
        {'code': code,
         'set_dest_reg_idx': set_dest_reg_idx,
         'set_src_reg_idx': set_src_reg_idx,
         'vm_decl_rd': vm_decl_rd,
         'copy_old_vd': copyOldVd(old_vd_idx)
        },
        flags)

    # Because of the use of templates, we had to put all parts in header to
    # keep the compiler happy.
    header_output = \
        VectorCryptoArithMicroDeclare.subst(microiop) + \
        VectorCryptoMicroConstructor.subst(microiop) + \
        VectorCryptoMicroExecute.subst(microiop) + \
        VectorCryptoMacroDeclare.subst(iop) + \
        VectorCryptoMacroConstructor.subst(iop)

    decode_block = VectorCryptoArithDecodeBlock.subst(iop)
}};