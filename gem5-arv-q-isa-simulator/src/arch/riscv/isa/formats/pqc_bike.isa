def format ClmulInst(code, category, *flags) {{
    iop = InstObjParams(name, Name, 'VectorArithMacroInst', {'code': code}, flags)

    code=""
    if category in ["OPIVV"]:
        code = "clmul<ElemType>(&Vd_vu[2*i],Vs2_vu[i+offset],Vs1_vu[i+offset]);"
    elif category in ["OPIVX"]:
        code = "clmul<ElemType>(&Vd_vu[2*i],Vs2_vu[i+offset],Rs1_vu);"
    else:
        error("not supported category for ClmulInst: %s" % category)
    
    micro_oprd=""
    if category in ["OPIVV"]:
        micro_oprd = '''
            auto &tmp_d0 = 
		    *(RiscvISAInst::VecRegContainer *)
		    xc->getWritableRegOperand(
		        this, 0);
            auto Vd = tmp_d0.as<vu>();
            RiscvISAInst::VecRegContainer tmp_s0;
            xc->getRegOperand(this, 0,
                &tmp_s0);
            auto Vs1 = tmp_s0.as<vu>();
            RiscvISAInst::VecRegContainer tmp_s1;
            xc->getRegOperand(this, 1,
                &tmp_s1);
            auto Vs2 = tmp_s1.as<vu>();
        '''
    elif category in ["OPIVX"]:
        micro_oprd = '''
            auto &tmp_d0 = 
		    *(RiscvISAInst::VecRegContainer *)
		    xc->getWritableRegOperand(
		        this, 0);
            auto Vd = tmp_d0.as<vu>();
            Rs1 = xc->getRegOperand(this, 0);
            RiscvISAInst::VecRegContainer tmp_s1;
            xc->getRegOperand(this, 1,
                &tmp_s1);
            auto Vs2 = tmp_s1.as<vu>();
        '''
    else:
        error("not supported category for ClmulInst: %s" % category)

    v0_required = True
    mask_cond = v0_required
    need_elem_idx = mask_cond or code.find("ei") != -1
    old_vd_idx = 2

    dest_reg_id = "vecRegClass[_machInst.vd + _microIdx]"
    src1_reg_id = ""
    if category in ["OPIVV"]:
        src1_reg_id = "vecRegClass[_machInst.vs1 + _microIdx / 2]"
    elif category in ["OPIVX"]:
        src1_reg_id = "intRegClass[_machInst.rs1]"
    else:
        error("not supported category for ClmulInst: %s" % category)
    src2_reg_id = "vecRegClass[_machInst.vs2 + _microIdx / 2]"
    src3_reg_id = "vecRegClass[_machInst.vs3 + _microIdx]"

    set_dest_reg_idx = setDestWrapper(dest_reg_id)

    set_src_reg_idx = ""
    set_src_reg_idx += setSrcWrapper(src1_reg_id)
    set_src_reg_idx += setSrcWrapper(src2_reg_id)
    set_src_reg_idx += setSrcWrapper(src3_reg_id)
    if v0_required:
        set_src_reg_idx += setSrcVm()

    # code
    if mask_cond:
        code = maskCondWrapper(code)
    if need_elem_idx:
        code = eiDeclarePrefix(code, widening=True)
    code = loopWrapper(code)

    code = wideningOpRegisterConstraintChecks(code)

    vm_decl_rd = ""
    if v0_required:
        vm_decl_rd = vmDeclAndReadData()

    microiop = InstObjParams(name + "_micro",
        Name + "Micro",
        'VectorArithMicroInst',
        {'code': code,
         'micro_oprd': micro_oprd,
         'set_dest_reg_idx': set_dest_reg_idx,
         'set_src_reg_idx': set_src_reg_idx,
         'vm_decl_rd': vm_decl_rd,
         'copy_old_vd': copyOldVd(old_vd_idx)},
        flags)

    # Because of the use of templates, we had to put all parts in header to
    # keep the compiler happy.
    header_output = \
        GFMicroDeclare.subst(microiop) + \
        GFMicroConstructor.subst(microiop) + \
        GFWideningMicroExecute.subst(microiop) + \
        GFMacroDeclare.subst(iop) + \
        GFWideningMacroConstructor.subst(iop)

    decode_block = VectorIntDecodeBlock.subst(iop)
}};

def format GFMulInst(code, category, *flags) {{
    iop = InstObjParams(name, Name, 'VectorArithMacroInst', {'code': code}, flags)
    read_csr=read_primpoly_wrapper()
    code=""
    if category in ["OPIVV"]:
        code = "Vd_vu[i]=gf_mul(Vs2_vu[i],Vs1_vu[i],prim_poly);"
    elif category in ["OPIVX"]:
        code = "Vd_vu[i]=gf_mul(Vs2_vu[i],Rs1_vu,prim_poly);"
    else:
        error("not supported category for GFMulInst: %s" % category)
    
    micro_oprd=""
    if category in ["OPIVV"]:
        micro_oprd = '''
            auto &tmp_d0 = 
		    *(RiscvISAInst::VecRegContainer *)
		    xc->getWritableRegOperand(
		        this, 0);
            auto Vd = tmp_d0.as<vu>();
            RiscvISAInst::VecRegContainer tmp_s0;
            xc->getRegOperand(this, 0,
                &tmp_s0);
            auto Vs1 = tmp_s0.as<vu>();
            RiscvISAInst::VecRegContainer tmp_s1;
            xc->getRegOperand(this, 1,
                &tmp_s1);
            auto Vs2 = tmp_s1.as<vu>();
        '''
    elif category in ["OPIVX"]:
        micro_oprd = '''
            auto &tmp_d0 = 
		    *(RiscvISAInst::VecRegContainer *)
		    xc->getWritableRegOperand(
		        this, 0);
            auto Vd = tmp_d0.as<vu>();
            Rs1 = xc->getRegOperand(this, 0);
            RiscvISAInst::VecRegContainer tmp_s1;
            xc->getRegOperand(this, 1,
                &tmp_s1);
            auto Vs2 = tmp_s1.as<vu>();
        '''
    else:
        error("not supported category for GFMulInst: %s" % category)

    v0_required = True
    mask_cond = v0_required
    need_elem_idx = mask_cond or code.find("ei") != -1
    old_vd_idx = 2

    dest_reg_id = "vecRegClass[_machInst.vd + _microIdx]"
    src1_reg_id = ""
    if category in ["OPIVV"]:
        src1_reg_id = "vecRegClass[_machInst.vs1 + _microIdx]"
    elif category in ["OPIVX"]:
        src1_reg_id = "intRegClass[_machInst.rs1]"
    else:
        error("not supported category for GFMulInst: %s" % category)
    src2_reg_id = "vecRegClass[_machInst.vs2 + _microIdx]"
    src3_reg_id = "vecRegClass[_machInst.vs3 + _microIdx]"

    set_dest_reg_idx = setDestWrapper(dest_reg_id)

    set_src_reg_idx = ""
    set_src_reg_idx += setSrcWrapper(src1_reg_id)
    set_src_reg_idx += setSrcWrapper(src2_reg_id)
    set_src_reg_idx += setSrcWrapper(src3_reg_id)
    if v0_required:
        set_src_reg_idx += setSrcVm()

    # code
    if mask_cond:
        code = maskCondWrapper(code)
    if need_elem_idx:
        code = eiDeclarePrefix(code, widening=False)
    code = loopWrapper(code)

    vm_decl_rd = ""
    if v0_required:
        vm_decl_rd = vmDeclAndReadData()

    microiop = InstObjParams(name + "_micro",
        Name + "Micro",
        'VectorArithMicroInst',
        {'panic_condition': panic_condition(name),
         'read_csr': read_csr,
         'code': code,
         'micro_oprd': micro_oprd,
         'set_dest_reg_idx': set_dest_reg_idx,
         'set_src_reg_idx': set_src_reg_idx,
         'vm_decl_rd': vm_decl_rd,
         'copy_old_vd': copyOldVd(old_vd_idx)},
        flags)

    # Because of the use of templates, we had to put all parts in header to
    # keep the compiler happy.
    header_output = \
        GFMicroDeclare.subst(microiop) + \
        GFMicroConstructor.subst(microiop) + \
        GFMicroExecute.subst(microiop) + \
        GFMacroDeclare.subst(iop) + \
        GFMacroConstructor.subst(iop)

    decode_block = VectorIntDecodeBlock.subst(iop)
}};

def format GFInvInst(code, *flags){{
    code='''
    // read primitive polynomial form CSR
    uint16_t prim_poly;
    prim_poly = xc->readMiscReg(MISCREG_PRIMPOLY);
    Rd=gf_inv(Rs1,prim_poly);
    '''
    iop = InstObjParams(name, Name, 'RegOp', code, flags)
    header_output = BasicDeclare.subst(iop)
    decoder_output = BasicConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = BasicExecute.subst(iop)
}};